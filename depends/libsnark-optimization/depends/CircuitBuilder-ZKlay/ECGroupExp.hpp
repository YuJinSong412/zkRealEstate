

#pragma once


#include <global.hpp>
#include <Config.hpp>
#include <BigIntegerAffinePoint.hpp>
#include <utilities.hpp>


namespace CircuitBuilder {
namespace ZKlay {

    class ECGroupExp {


    public :
        // Note: this parameterization assumes that the underlying field has
        // Config.FIELD_PRIME =
        // 21888242871839275222246405745257275088548364400416034343698204186575808495617
        // number of bits in the exponent. Note that the
        // most significant bit should be set to 1, and the
        // three least significant bits should be be zero.
        // See the constructor
        static const int SECRET_BITWIDTH = 254; 

        // parameterization in
        // https://eprint.iacr.org/2015/1093.pdf

    private:
        
        vector<BigInteger> outWires;

        // The Affine point representation is used as it saves one gate per bit
        // The Base point both parties agree to
        BigIntegerAffinePoint basePoint; 
       
        
        // the bits of the secret generated by this party
        // (follows little-endian order)
        vector<BigInteger> secretBits;


        // gadget outputs
        // the x-coordinate of the key exchange
        // material to be sent to the other party
        // outputPublicValue = ((this party's secret)*Base).x
        // BigInteger outputPublicValue; 
        vector<BigInteger> outputPublicValue; 

        vector<BigIntegerAffinePoint> baseTable;



        /**
         * This gadget receives two points: Base = (baseX) and H = (hX), and the secret
         * key Bits and outputs the scalar EC multiplications: secret*Base, secret*H
         * 
         * The secret key bits must be of length SECRET_BITWIDTH and are expected to
         * follow a little endian order. The most significant bit should be 1, and the
         * three least significant bits should be zero.
         * 
         * This gadget can work with both static and dynamic inputs If public keys are
         * static, the wires of base and h should be made ConstantWires when creating
         * them (before calling this gadget).
         * 
         * 
         */
        BigInteger modvalue;
        BigInteger FIELD_PRIME = BigInteger ( "21888242871839275222246405745257275088548364400416034343698204186575808495617" , 10) ;
        BigInteger LOG2_FIELD_PRIME = FIELD_PRIME.size_in_base(2); ;
        BigInteger CURVE_ORDER = BigInteger ( "21888242871839275222246405745257275088597270486034011716802747351550446453784" , 10) ;
        BigInteger SUBGROUP_ORDER = BigInteger("2736030358979909402780800718157159386074658810754251464600343418943805806723", 10);
        BigInteger COEFF_A = BigInteger("126932", 10);
       
        void checkSecretBits();
        void computeYCoordinates() ;    
        void assertValidPointOnEC(BigInteger x, BigInteger y) ;
        vector<BigIntegerAffinePoint> preprocess(BigIntegerAffinePoint p);


        /**
         * Performs scalar multiplication (secretBits must comply with the conditions
         * above)
         */
        BigIntegerAffinePoint mul(BigIntegerAffinePoint p, vector<BigInteger> & secretBits, vector<BigIntegerAffinePoint> & precomputedTable) ;

        BigIntegerAffinePoint doubleAffinePoint(BigIntegerAffinePoint p) ;
        BigIntegerAffinePoint addAffinePoints(BigIntegerAffinePoint p1, BigIntegerAffinePoint p2) ;
        BigIntegerAffinePoint subAffinePoints(BigIntegerAffinePoint p1, BigIntegerAffinePoint p2) ;
        BigInteger FieldDivision(BigInteger a, BigInteger b);

    protected:

        void buildCircuit() ;
    

    public:

        vector<BigInteger> expwire(BigInteger input);
        
        ECGroupExp(BigInteger baseX, BigInteger secret, string desc="") ;
        ECGroupExp(const char* baseX, const char* secret, string desc="") ;
        ECGroupExp(BigInteger baseX, BigInteger baseY , BigInteger secret, string desc="") ;
        ~ECGroupExp();
        vector<BigInteger> & getOutputWires() ;
        BigInteger computeYCoordinate(BigInteger &x , const BigInteger & FIELD_PRIME) ;
        BigInteger getOutputPublicValue() ;

    };

}}
